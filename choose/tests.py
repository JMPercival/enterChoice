from django.test import TestCase
from random import random
from choose.models import Choices,Rolls
# Create your tests here.

class chooseInputTestCase(TestCase):
	def setUp(self):
		#next three are valid
		Choices(choice='one', ip='111.222.333.444').save()
		Choices(choice='two', ip='111.222.333.444').save()
		Choices(choice='three', ip='111.222.333.444').save()
		bigThing='L'+300*'O'+'NG'
		Choices(choice=bigThing, ip='111.222.333.444').save()
		Choices(choice='brokenIP', ip='blank').save()
		
		#All generated by the system so these should not be broken...
		Rolls(start=0, end=0, randomRoll=((random()*1000)%10)).save()
		Rolls(start=10, end=20, randomRoll=((random()*1000)%300)).save()
		Rolls(start=30, end=20, randomRoll=((random()*1000)%500)).save()
	
	def testChoices(self):
		a=Choices.objects.filter(trigger=1, id__gt=1)
		b=Choices.objects.filter(trigger=1, id__gt=2)
		c=Choices.objects.filter(trigger=1, id__gt=3)
		print 'Checking that len of all the queries is ok'
		self.assertEqual(len(a),4)
		self.assertEqual(len(b),3)
		self.assertEqual(len(c),2)
		print 'Checking that data in queries is ok'
		self.assertEqual(a[0].id,2)
		self.assertEqual(a[0].choice,'two')
		self.assertEqual(a[2].id,4)
		self.assertEqual(a[2].choice,'L'+300*'O'+'NG')
		print 'Choices are good to go. Tests have been passed.'
	def testRolls(self):
		y=Rolls.objects.filter(trigger=1)
		print 'Checking that the ids on the rolls match up with what they are supposed to'
		self.assertEqual(y[0].id,1)
		self.assertEqual(y[1].id,2)
		self.assertEqual(y[2].id,3)
		

		print 'ALL TESTS HAVE BEEN PASSED SUCCESSFULLY!!'
